@page "/wound/inactivate"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<style>
    :root {
        --hchb-primary: #3379c0;
        --hchb-primary-dark: #285a8f;
        --hchb-secondary: #333333;
        --hchb-accent: #eeeeee;
        --hchb-success: #28a745;
        --hchb-danger: #dc3545;
        --hchb-warning: #ffc107;
        --hchb-info: #17a2b8;
    }

    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
    }

    .dialog-container {
        width: 329px;
        height: 229px;
        background: white;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        display: flex;
        flex-direction: column;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #ccc;
    }

    /* Header Section */
    .dialog-header {
        background: linear-gradient(135deg, var(--hchb-primary) 0%, var(--hchb-primary-dark) 100%);
        color: white;
        padding: 20px;
        height: 60px;
        display: flex;
        align-items: center;
    }

    .dialog-header h1 {
        margin: 0;
        font-size: 20px;
        font-weight: bold;
    }

    /* Body Section */
    .dialog-body {
        flex: 1;
        background: white;
        padding: 20px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    /* Form Groups */
    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
        display: block;
        font-size: 13px;
    }

    .required-field::after {
        content: " *";
        color: var(--hchb-danger);
    }

    /* Form Controls */
    .form-control {
        border: none;
        border-bottom: 2px solid #dee2e6;
        border-radius: 0;
        padding: 8px 0;
        font-size: 14px;
        background: transparent;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        width: 100%;
    }

    .form-control:focus {
        border-bottom-color: var(--hchb-primary);
        box-shadow: none;
        outline: 0;
        background: transparent;
    }

    .form-control.is-invalid {
        border-bottom-color: var(--hchb-danger);
    }

    .form-control.is-valid {
        border-bottom-color: var(--hchb-success);
    }

    /* Select Styling */
    .form-select {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 6 7 7 7-7'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 16px 12px;
        cursor: pointer;
        border: none;
        border-bottom: 2px solid #dee2e6;
        border-radius: 0;
        background-color: transparent;
    }

    .form-select:focus {
        border-bottom-color: var(--hchb-primary);
        box-shadow: none;
        background-color: transparent;
    }

    /* Validation Messages */
    .invalid-feedback {
        display: block;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: var(--hchb-danger);
    }

    .valid-feedback {
        display: block;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: var(--hchb-success);
    }

    /* Footer Section */
    .dialog-footer {
        background: var(--hchb-accent);
        border-top: 1px solid #dee2e6;
        padding: 10px 20px;
        height: 60px;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

    .btn {
        border: none;
        border-radius: 4px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
        min-width: 120px;
        justify-content: center;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background: var(--hchb-primary);
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: var(--hchb-primary-dark);
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: var(--hchb-secondary);
        color: white;
    }

    .btn-secondary:hover:not(:disabled) {
        background: #555;
        transform: translateY(-1px);
    }

    /* Loading States */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255,255,255,0.9);
        display: @(showLoadingOverlay ? "flex" : "none");
        align-items: center;
        justify-content: center;
        z-index: 100;
        border-radius: 8px;
    }

    .loading-content {
        text-align: center;
        color: #666;
    }

    /* Error States */
    .error-message {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 15px;
        font-size: 13px;
        display: @(showErrorMessage ? "flex" : "none");
        align-items: center;
        gap: 8px;
    }

    /* Success States */
    .success-message {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 15px;
        font-size: 13px;
        display: @(showSuccessMessage ? "flex" : "none");
        align-items: center;
        gap: 8px;
    }

    /* Modal-like behavior */
    .dialog-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    /* Animation */
    .dialog-container {
        animation: slideIn 0.3s ease-out;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: scale(0.9) translateY(-20px);
        }
        to {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 400px) {
        .dialog-container {
            width: 95%;
            height: auto;
            min-height: 229px;
            margin: 20px;
        }
        
        .dialog-footer {
            flex-direction: column;
            height: auto;
            padding: 15px;
            gap: 10px;
        }
        
        .btn {
            width: 100%;
        }
    }

    /* Validation styling */
    .form-group.has-error .form-control,
    .form-group.has-error .form-select {
        border-bottom-color: var(--hchb-danger);
    }

    .form-group.has-success .form-control,
    .form-group.has-success .form-select {
        border-bottom-color: var(--hchb-success);
    }
</style>

<div class="dialog-backdrop">
    <div class="dialog-container">
        <!-- Header -->
        <div class="dialog-header">
            <h1>@GetHeaderTitle()</h1>
        </div>

        <!-- Body -->
        <div class="dialog-body">
            <!-- Error Message -->
            <div class="error-message">
                <i class="bi bi-exclamation-triangle"></i>
                <span>@errorMessage</span>
            </div>

            <!-- Success Message -->
            <div class="success-message">
                <i class="bi bi-check-circle"></i>
                <span>@successMessage</span>
            </div>

            <EditForm Model="@inactivationData" OnValidSubmit="@HandleOk">
                <div class="form-group @GetValidationClass("reason")">
                    <label for="reasonSelect" class="required-field">Reason:</label>
                    <InputSelect class="form-control form-select" @bind-Value="inactivationData.Reason" @bind-Value:after="HandleReasonChange">
                        <option value="">Select reason...</option>
                        <option value="healed">Wound Healed</option>
                        <option value="transferred">Patient Transferred</option>
                        <option value="discharged">Patient Discharged</option>
                        <option value="deceased">Patient Deceased</option>
                        <option value="merged">Merged with Another Wound</option>
                        <option value="duplicate">Duplicate Entry</option>
                        <option value="error">Entered in Error</option>
                        <option value="other">Other</option>
                    </InputSelect>
                    <div class="invalid-feedback">@GetValidationMessage("reason")</div>
                </div>

                <!-- Additional reason text field (shown when "Other" is selected) -->
                @if (inactivationData.Reason == "other")
                {
                    <div class="form-group @GetValidationClass("otherReason")">
                        <label for="otherReason">Please specify:</label>
                        <InputText class="form-control" @bind-Value="inactivationData.OtherReasonText" placeholder="Enter specific reason..." />
                        <div class="invalid-feedback">@GetValidationMessage("otherReason")</div>
                    </div>
                }
            </EditForm>
        </div>

        <!-- Footer -->
        <div class="dialog-footer">
            <button type="button" class="btn btn-primary" @onclick="HandleOk" disabled="@(!CanSubmit())">
                OK
            </button>
            <button type="button" class="btn btn-secondary" @onclick="HandleCancel">
                <i class="bi bi-x-circle"></i> Cancel
            </button>
        </div>

        <!-- Loading Overlay -->
        <div class="loading-overlay">
            <div class="loading-content">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div style="margin-top: 10px;">Inactivating wound...</div>
            </div>
        </div>
    </div>
</div>

@code {
    public class InactivationData
    {
        public string Reason { get; set; } = "";
        public string OtherReasonText { get; set; } = "";
        public int? WoundId { get; set; }
        public string WoundName { get; set; } = "";
        public string PatientName { get; set; } = "";
        public DateTime InactivatedDate { get; set; } = DateTime.Now;
        public string InactivatedBy { get; set; } = "Current User";
    }

    private InactivationData inactivationData = new InactivationData();
    private bool showLoadingOverlay = false;
    private bool showErrorMessage = false;
    private bool showSuccessMessage = false;
    private string errorMessage = "";
    private string successMessage = "";
    private bool isProcessing = false;
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await InitializeDialog();
    }

    private async Task InitializeDialog()
    {
        // Initialize with default values
        inactivationData.WoundName = "Selected Wound";
        inactivationData.PatientName = "John Doe";
        
        await Task.CompletedTask;
    }

    private void HandleReasonChange()
    {
        // Clear other reason text when changing from "other" to something else
        if (inactivationData.Reason != "other")
        {
            inactivationData.OtherReasonText = "";
        }
        
        ValidateForm();
        ClearMessages();
        StateHasChanged();
    }

    private bool CanSubmit()
    {
        if (string.IsNullOrEmpty(inactivationData.Reason))
            return false;
        
        if (inactivationData.Reason == "other" && string.IsNullOrEmpty(inactivationData.OtherReasonText))
            return false;
        
        return !isProcessing;
    }

    private async Task HandleOk()
    {
        if (isProcessing) return;

        if (!ValidateForm())
        {
            ShowErrorMessage("Please correct the validation errors.");
            return;
        }

        // Confirm the action
        string reasonText = GetReasonDisplayText();
        string confirmMessage = $"Are you sure you want to inactivate this wound?\n\nReason: {reasonText}";
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage);
        if (!confirmed)
        {
            return;
        }

        await PerformInactivation();
    }

    private async Task HandleCancel()
    {
        if (isProcessing)
        {
            return; // Prevent cancellation during processing
        }

        // In a real app, you'd navigate using NavigationManager
        // NavigationManager.NavigateTo("/");
        await Task.CompletedTask;
    }

    private async Task PerformInactivation()
    {
        isProcessing = true;
        showLoadingOverlay = true;
        StateHasChanged();
        
        try
        {
            // Simulate API call
            await Task.Delay(2000);
            
            // Simulate successful inactivation
            showLoadingOverlay = false;
            ShowSuccessMessage("Wound has been inactivated successfully.");
            StateHasChanged();
            
            // Close dialog after short delay
            await Task.Delay(1500);
            // In a real app, you'd navigate back or close the dialog
            
        }
        catch (Exception ex)
        {
            isProcessing = false;
            showLoadingOverlay = false;
            ShowErrorMessage("Error inactivating wound. Please try again.");
            Console.WriteLine($"Inactivation error: {ex.Message}");
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        validationErrors.Clear();

        // Validate reason selection
        if (string.IsNullOrEmpty(inactivationData.Reason))
        {
            validationErrors["reason"] = "Please select a reason for inactivating the wound.";
        }

        // Validate other reason text if "other" is selected
        if (inactivationData.Reason == "other" && string.IsNullOrEmpty(inactivationData.OtherReasonText))
        {
            validationErrors["otherReason"] = "Please specify the reason.";
        }

        return validationErrors.Count == 0;
    }

    private string GetValidationClass(string field)
    {
        if (validationErrors.ContainsKey(field))
        {
            return "has-error";
        }
        return "";
    }

    private string GetValidationMessage(string field)
    {
        return validationErrors.ContainsKey(field) ? validationErrors[field] : "";
    }

    private string GetReasonDisplayText()
    {
        if (inactivationData.Reason == "other")
        {
            return inactivationData.OtherReasonText;
        }
        
        return inactivationData.Reason switch
        {
            "healed" => "Wound Healed",
            "transferred" => "Patient Transferred",
            "discharged" => "Patient Discharged",
            "deceased" => "Patient Deceased",
            "merged" => "Merged with Another Wound",
            "duplicate" => "Duplicate Entry",
            "error" => "Entered in Error",
            _ => ""
        };
    }

    private string GetHeaderTitle()
    {
        if (!string.IsNullOrEmpty(inactivationData.WoundName) && inactivationData.WoundName != "Selected Wound")
        {
            return $"Inactivate: {inactivationData.WoundName}";
        }
        return "Inactivate Wound";
    }

    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
        showErrorMessage = true;
        showSuccessMessage = false;
    }

    private void ShowSuccessMessage(string message)
    {
        successMessage = message;
        showSuccessMessage = true;
        showErrorMessage = false;
    }

    private void ClearMessages()
    {
        showErrorMessage = false;
        showSuccessMessage = false;
    }
}

<script>
    // Keyboard shortcuts
    document.addEventListener('keydown', function(event) {
        switch (event.key) {
            case 'Enter':
                if (event.target.tagName !== 'TEXTAREA') {
                    event.preventDefault();
                    // Trigger OK from Blazor component
                }
                break;
            case 'Escape':
                event.preventDefault();
                // Trigger cancel from Blazor component
                break;
        }
    });
</script>
