@page "/wound/associate-to-order"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<style>
    :root {
        --hchb-primary: #3379c0;
        --hchb-primary-dark: #285a8f;
        --hchb-secondary: #333333;
        --hchb-accent: #eeeeee;
        --hchb-success: #28a745;
        --hchb-danger: #dc3545;
        --hchb-warning: #ffc107;
        --hchb-info: #17a2b8;
    }

    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
    }

    .dialog-container {
        width: 420px;
        height: 232px;
        background: white;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        display: flex;
        flex-direction: column;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #ccc;
    }

    /* Header Section */
    .dialog-header {
        background: linear-gradient(135deg, var(--hchb-primary) 0%, var(--hchb-primary-dark) 100%);
        color: white;
        padding: 20px;
        height: 60px;
        display: flex;
        align-items: center;
    }

    .dialog-header h1 {
        margin: 0;
        font-size: 20px;
        font-weight: bold;
    }

    /* Body Section */
    .dialog-body {
        flex: 1;
        background: white;
        padding: 20px;
        overflow-y: auto;
        min-height: 85px;
    }

    /* Footer Section */
    .dialog-footer {
        background: var(--hchb-accent);
        border-top: 1px solid #dee2e6;
        padding: 10px 20px;
        height: 60px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 10px;
    }

    /* Form Controls */
    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        font-size: 13px;
        color: #333;
    }

    .required-field::after {
        content: " *";
        color: var(--hchb-danger);
        font-weight: bold;
    }

    /* Multi-select dropdown */
    .multi-select-container {
        position: relative;
    }

    .multi-select-display {
        border: none;
        border-bottom: 2px solid #dee2e6;
        padding: 8px 25px 8px 0;
        background: transparent;
        cursor: pointer;
        min-height: 23px;
        font-size: 14px;
        display: flex;
        align-items: center;
        outline: none;
    }

    .multi-select-display:focus {
        border-bottom-color: var(--hchb-primary);
    }

    .multi-select-display::after {
        content: '';
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid #333;
    }

    .multi-select-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
        display: @(showWoundsDropdown ? "block" : "none");
    }

    .multi-select-option {
        padding: 8px 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        border-bottom: 1px solid #f1f1f1;
    }

    .multi-select-option:hover {
        background: #f8f9fa;
    }

    .multi-select-option:last-child {
        border-bottom: none;
    }

    .multi-select-option input[type="checkbox"] {
        margin: 0;
    }

    .multi-select-option label {
        margin: 0;
        cursor: pointer;
        font-weight: normal;
        font-size: 13px;
    }

    .multi-select-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        margin-top: 8px;
    }

    .multi-select-tag {
        background: var(--hchb-primary);
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .multi-select-tag .remove {
        cursor: pointer;
        font-weight: bold;
        padding: 0 2px;
    }

    .multi-select-tag .remove:hover {
        background: rgba(255,255,255,0.2);
        border-radius: 50%;
    }

    /* Select All Option */
    .select-all-option {
        font-weight: bold;
        color: var(--hchb-primary);
        border-bottom: 2px solid var(--hchb-primary) !important;
    }

    /* Button Styles */
    .btn {
        border: none;
        border-radius: 4px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
        min-width: 120px;
        justify-content: center;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background: var(--hchb-primary);
        color: white;
        min-width: 180px;
    }

    .btn-primary:hover:not(:disabled) {
        background: var(--hchb-primary-dark);
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: var(--hchb-secondary);
        color: white;
    }

    .btn-secondary:hover:not(:disabled) {
        background: #555;
        transform: translateY(-1px);
    }

    /* Validation Messages */
    .invalid-feedback {
        display: block;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: var(--hchb-danger);
    }

    .valid-feedback {
        display: block;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: var(--hchb-success);
    }

    /* Loading States */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255,255,255,0.9);
        display: @(showLoadingOverlay ? "flex" : "none");
        align-items: center;
        justify-content: center;
        z-index: 100;
        border-radius: 8px;
    }

    .loading-content {
        text-align: center;
        color: #666;
    }

    /* Error Messages */
    .error-message {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 15px;
        font-size: 13px;
        display: @(showErrorMessage ? "flex" : "none");
        align-items: center;
        gap: 8px;
    }

    /* Success Messages */
    .success-message {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 15px;
        font-size: 13px;
        display: @(showSuccessMessage ? "flex" : "none");
        align-items: center;
        gap: 8px;
    }

    /* Modal-like behavior */
    .dialog-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    /* Animation */
    .dialog-container {
        animation: slideIn 0.3s ease-out;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: scale(0.9) translateY(-20px);
        }
        to {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 480px) {
        .dialog-container {
            width: 95%;
            height: auto;
            min-height: 232px;
            margin: 20px;
        }
        
        .dialog-footer {
            flex-direction: column;
            height: auto;
            padding: 15px;
            gap: 10px;
        }
        
        .btn {
            width: 100%;
        }
    }

    /* Validation styling */
    .form-group.has-error .multi-select-display {
        border-bottom-color: var(--hchb-danger);
    }

    .form-group.has-success .multi-select-display {
        border-bottom-color: var(--hchb-success);
    }
</style>

<div class="dialog-backdrop">
    <div class="dialog-container">
        <!-- Header -->
        <div class="dialog-header">
            <h1>Associate Wound To Order</h1>
        </div>

        <!-- Body -->
        <div class="dialog-body">
            <!-- Error Message -->
            <div class="error-message">
                <i class="bi bi-exclamation-triangle"></i>
                <span>@errorMessage</span>
            </div>

            <!-- Success Message -->
            <div class="success-message">
                <i class="bi bi-check-circle"></i>
                <span>@successMessage</span>
            </div>

            <EditForm Model="@associationData" OnValidSubmit="@HandleSave">
                <div class="form-group @GetValidationClass("wounds")">
                    <label for="activeWounds" class="required-field">Active Wound(s)</label>
                    <div class="multi-select-container">
                        <div class="multi-select-display" tabindex="0" @onclick="ToggleWoundsDropdown" @onkeydown="HandleWoundsKeydown">
                            <span>@GetWoundsDisplayText()</span>
                        </div>
                        <div class="multi-select-dropdown">
                            <!-- Select All Option -->
                            <div class="multi-select-option select-all-option">
                                <input type="checkbox" id="selectAll" 
                                       checked="@IsAllSelected()" 
                                       @onchange="HandleSelectAll" />
                                <label for="selectAll">Select All Wounds</label>
                            </div>
                            
                            <!-- Individual Wound Options -->
                            @foreach (var wound in availableWounds)
                            {
                                <div class="multi-select-option">
                                    <input type="checkbox" 
                                           id="wound_@wound.Id" 
                                           checked="@selectedWoundIds.Any(w => w.Id == wound.Id)"
                                           @onchange="@((ChangeEventArgs e) => HandleWoundChange(wound.Id, wound.Name, e.Value as bool? ?? false))" />
                                    <label for="wound_@wound.Id" title="@wound.Name">@wound.Name</label>
                                </div>
                            }
                        </div>
                        <div class="multi-select-tags">
                            @if (ShouldShowTags())
                            {
                                @foreach (var wound in selectedWoundIds)
                                {
                                    <div class="multi-select-tag">
                                        @wound.Name
                                        <span class="remove" @onclick="@(() => RemoveWound(wound.Id))">×</span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="invalid-feedback">@GetValidationMessage("wounds")</div>
                </div>
            </EditForm>
        </div>

        <!-- Footer -->
        <div class="dialog-footer">
            <button type="button" class="btn btn-primary" @onclick="HandleSave" disabled="@(!CanSave())">
                <i class="bi bi-floppy"></i> Save & Close
            </button>
            <button type="button" class="btn btn-secondary" @onclick="HandleDontSave">
                <i class="bi bi-x-circle"></i> Don't Save
            </button>
        </div>

        <!-- Loading Overlay -->
        <div class="loading-overlay">
            <div class="loading-content">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div style="margin-top: 10px;">Associating wounds...</div>
            </div>
        </div>
    </div>
</div>

@code {
    public class AssociationData
    {
        public int? OrderId { get; set; }
        public string OrderDescription { get; set; } = "";
        public int? PatientId { get; set; }
        public DateTime AssociatedDate { get; set; } = DateTime.Now;
        public string AssociatedBy { get; set; } = "Current User";
    }

    public class AvailableWound
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Location { get; set; } = "";
        public string Type { get; set; } = "";
        public string Stage { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTime LastAssessment { get; set; }
    }

    public class SelectedWound
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }

    private AssociationData associationData = new AssociationData();
    private List<AvailableWound> availableWounds = new List<AvailableWound>();
    private List<SelectedWound> selectedWoundIds = new List<SelectedWound>();
    private bool showWoundsDropdown = false;
    private bool showLoadingOverlay = false;
    private bool showErrorMessage = false;
    private bool showSuccessMessage = false;
    private string errorMessage = "";
    private string successMessage = "";
    private bool isProcessing = false;
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();
    private const int maxOverflowChars = 2000;

    protected override async Task OnInitializedAsync()
    {
        await InitializeDialog();
        await LoadAvailableWounds();
    }

    private async Task InitializeDialog()
    {
        associationData.OrderDescription = "Current Order";
        await Task.CompletedTask;
    }

    private async Task LoadAvailableWounds()
    {
        // Simulate API call delay
        await Task.Delay(500);
        
        // Mock data for available wounds
        availableWounds = new List<AvailableWound>
        {
            new AvailableWound
            {
                Id = 1,
                Name = "Left Heel - Pressure Ulcer Stage 2",
                Location = "Left Heel",
                Type = "Pressure Ulcer",
                Stage = "Stage 2",
                Status = "Active",
                LastAssessment = new DateTime(2024, 1, 15)
            },
            new AvailableWound
            {
                Id = 2,
                Name = "Right Elbow - Surgical Wound",
                Location = "Right Elbow",
                Type = "Surgical Wound",
                Stage = "N/A",
                Status = "Active",
                LastAssessment = new DateTime(2024, 1, 14)
            },
            new AvailableWound
            {
                Id = 3,
                Name = "Sacrum - Pressure Ulcer Stage 3",
                Location = "Sacrum",
                Type = "Pressure Ulcer",
                Stage = "Stage 3",
                Status = "Active",
                LastAssessment = new DateTime(2024, 1, 13)
            },
            new AvailableWound
            {
                Id = 4,
                Name = "Left Ankle - Diabetic Ulcer",
                Location = "Left Ankle",
                Type = "Diabetic Ulcer",
                Stage = "N/A",
                Status = "Active",
                LastAssessment = new DateTime(2024, 1, 12)
            },
            new AvailableWound
            {
                Id = 5,
                Name = "Right Shoulder - Traumatic Wound",
                Location = "Right Shoulder",
                Type = "Traumatic Wound",
                Stage = "N/A",
                Status = "Active",
                LastAssessment = new DateTime(2024, 1, 11)
            }
        };
        
        StateHasChanged();
    }

    private void ToggleWoundsDropdown()
    {
        showWoundsDropdown = !showWoundsDropdown;
        StateHasChanged();
    }

    private void HandleWoundsKeydown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            ToggleWoundsDropdown();
        }
        else if (e.Key == "Escape")
        {
            showWoundsDropdown = false;
            StateHasChanged();
        }
    }

    private void HandleSelectAll(ChangeEventArgs e)
    {
        bool isChecked = e.Value as bool? ?? false;
        
        if (isChecked)
        {
            selectedWoundIds = availableWounds.Select(w => new SelectedWound { Id = w.Id, Name = w.Name }).ToList();
        }
        else
        {
            selectedWoundIds.Clear();
        }
        
        ValidateWoundSelection();
        StateHasChanged();
    }

    private void HandleWoundChange(int woundId, string woundName, bool isChecked)
    {
        if (isChecked)
        {
            if (!selectedWoundIds.Any(w => w.Id == woundId))
            {
                selectedWoundIds.Add(new SelectedWound { Id = woundId, Name = woundName });
            }
        }
        else
        {
            selectedWoundIds.RemoveAll(w => w.Id == woundId);
        }
        
        ValidateWoundSelection();
        StateHasChanged();
    }

    private void RemoveWound(int woundId)
    {
        selectedWoundIds.RemoveAll(w => w.Id == woundId);
        ValidateWoundSelection();
        StateHasChanged();
    }

    private bool IsAllSelected()
    {
        return selectedWoundIds.Count == availableWounds.Count && availableWounds.Count > 0;
    }

    private string GetWoundsDisplayText()
    {
        if (selectedWoundIds.Count == 0)
        {
            return "Select wounds...";
        }
        else if (selectedWoundIds.Count == availableWounds.Count)
        {
            return "All wounds selected";
        }
        else
        {
            string fullText = string.Join(", ", selectedWoundIds.Select(w => w.Name));
            
            if (fullText.Length <= maxOverflowChars)
            {
                return fullText;
            }
            else
            {
                return $"{selectedWoundIds.Count} wounds selected";
            }
        }
    }

    private bool ShouldShowTags()
    {
        if (selectedWoundIds.Count == 0 || selectedWoundIds.Count == availableWounds.Count)
        {
            return false;
        }
        
        string fullText = string.Join(", ", selectedWoundIds.Select(w => w.Name));
        return fullText.Length > maxOverflowChars;
    }

    private bool ValidateWoundSelection()
    {
        validationErrors.Clear();

        if (selectedWoundIds.Count == 0)
        {
            validationErrors["wounds"] = "Please select at least one active wound.";
        }

        return validationErrors.Count == 0;
    }

    private string GetValidationClass(string field)
    {
        if (validationErrors.ContainsKey(field))
        {
            return "has-error";
        }
        else if (selectedWoundIds.Count > 0)
        {
            return "has-success";
        }
        return "";
    }

    private string GetValidationMessage(string field)
    {
        return validationErrors.ContainsKey(field) ? validationErrors[field] : "";
    }

    private bool CanSave()
    {
        return selectedWoundIds.Count > 0 && !isProcessing;
    }

    private async Task HandleSave()
    {
        if (isProcessing) return;

        if (!ValidateWoundSelection())
        {
            return;
        }

        // Confirm the association
        string woundNames = string.Join("\n- ", selectedWoundIds.Select(w => w.Name));
        string confirmMessage = $"Associate the following wounds to this order?\n\n- {woundNames}";
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage);
        if (!confirmed)
        {
            return;
        }

        await PerformAssociation();
    }

    private async Task HandleDontSave()
    {
        if (isProcessing)
        {
            return; // Prevent cancellation during processing
        }

        // In a real app, you'd navigate using NavigationManager
        // NavigationManager.NavigateTo("/");
        await Task.CompletedTask;
    }

    private async Task PerformAssociation()
    {
        isProcessing = true;
        showLoadingOverlay = true;
        StateHasChanged();
        
        try
        {
            // Simulate API call
            await Task.Delay(2000);
            
            // Simulate successful association
            showLoadingOverlay = false;
            ShowSuccessMessage($"Successfully associated {selectedWoundIds.Count} wound(s) to the order.");
            StateHasChanged();
            
            // Close dialog after short delay
            await Task.Delay(1500);
            // In a real app, you'd navigate back or close the dialog
            
        }
        catch (Exception ex)
        {
            isProcessing = false;
            showLoadingOverlay = false;
            ShowErrorMessage("Error associating wounds to order. Please try again.");
            Console.WriteLine($"Association error: {ex.Message}");
            StateHasChanged();
        }
    }

    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
        showErrorMessage = true;
        showSuccessMessage = false;
    }

    private void ShowSuccessMessage(string message)
    {
        successMessage = message;
        showSuccessMessage = true;
        showErrorMessage = false;
    }

    private void ClearMessages()
    {
        showErrorMessage = false;
        showSuccessMessage = false;
    }
}

<script>
    // Keyboard shortcuts and click outside handler
    document.addEventListener('keydown', function(event) {
        switch (event.key) {
            case 'Enter':
                if (!event.target.closest('.multi-select-dropdown')) {
                    event.preventDefault();
                    // Trigger save from Blazor component
                }
                break;
            case 'Escape':
                event.preventDefault();
                // Close dropdown or trigger don't save from Blazor component
                break;
        }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.multi-select-container')) {
            // Notify Blazor component to close dropdown
        }
    });
</script>
